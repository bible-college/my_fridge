services:
  api:
    build:
      context: ./backend
    container_name: my_fridge_api
    command: >
      sh -c "
        while ! curl -s http://elasticsearch:9200; do
          echo 'Waiting for Elasticsearch...'
          sleep 5
        done;
        echo 'Elasticsearch is up!';
        uv run alembic upgrade head &&
        uv run uvicorn main:app --host 0.0.0.0 --port 8000
      "
    ports:
      - "${HOST_API_PORT:-8000}:8000"
    volumes:
      - ./backend:/app
      - uv_venv:/app/.venv
    env_file:
      - .env
    environment:
      - PYTHONPATH=.
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      elasticsearch:
        condition: service_healthy

  db:
    image: pgvector/pgvector:pg16
    container_name: my_fridge_db
    env_file:
      - .env
    ports:
      - "${HOST_DB_PORT:-5433}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-app} -d ${POSTGRES_DB:-fridge_db}"]
      interval: 5s
      timeout: 3s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: my_fridge_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  # ✅ elasticsearch 서비스 추가
  elasticsearch:
    # image: docker.elastic.co/elasticsearch/elasticsearch:8.19.0  # ← 지우고
    build: ./backend/es                                                  # ← 이걸로 빌드
    container_name: my_fridge_es
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -vq '\"status\":\"red\"'"]
      interval: 10s
      timeout: 5s
      retries: 5
      
volumes:
  postgres_data:
  redis_data:
  uv_venv:
  elasticsearch_data: